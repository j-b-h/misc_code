#import boto3

def get_matching_s3_keys_list(bucket, s3_client, prefix=''):
    """
    Accepts bucket, an s3 client connection, and (optional) prefix.
    Returns a list of the keys in an S3 bucket.

    :param bucket: Name of the S3 bucket.
    """
    list_that_contains_file_names_in_function = list()

#    s3_client = boto3.client(
#        's3',
#        aws_access_key_id=aws_key,
#        aws_secret_access_key=aws_skey
#    )

    kwargs = {'Bucket': bucket}

    # If the prefix is a single string (not a tuple of strings), we can
    # do the filtering directly in the S3 API.
    if isinstance(prefix, str):
        kwargs['Prefix'] = prefix

    while True:

        # The S3 API response is a large blob of metadata.
        # 'Contents' contains information about the listed objects.
        resp = s3_client.list_objects_v2(**kwargs)

        try:
            contents = resp['Contents']
        except KeyError:
            return

        for obj in contents:
            key = obj['Key']
            if key.startswith(prefix):
                list_that_contains_file_names_in_function.append(key)

        # The S3 API is paginated, returning up to 1000 keys at a time.
        # Pass the continuation token into the next response, until we
        # reach the final page (when this field is missing).
        try:
            kwargs['ContinuationToken'] = resp['NextContinuationToken']
        except KeyError:
            break
    return list_that_contains_file_names_in_function
